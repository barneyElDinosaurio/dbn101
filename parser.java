
//----------------------------------------------------
// The following code was generated by CUP v0.10g
// Sat Aug 01 18:57:05 EDT 1998
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.Vector;

public class parser extends java_cup.runtime.lr_parser {

  /** constructor */
  public parser() {super();}

  /** production table */
  protected static final short _production_table[][] = {
        {1, 2},     {0, 2},     {1, 3},     {1, 1},     {1, 1}, 
        {2, 3},     {2, 6},     {2, 6},     {2, 4},     {2, 1}, 
        {2, 3},     {2, 2},     {2, 1},     {2, 2},     {2, 2}, 
        {2, 2},     {2, 2},     {2, 5},     {2, 1},     {2, 1}, 
        {2, 1},     {2, 2},     {2, 2},     {2, 4},     {2, 3}, 
        {2, 1},     {2, 1},     {3, 1},     {3, 2},     {4, 1}, 
        {4, 2},     {6, 1},     {6, 1},     {6, 3},     {6, 4}, 
        {6, 3},     {6, 4},     {5, 1},     {5, 3},     {5, 3}, 
        {5, 3},     {5, 3},     {5, 2}  };

  /** access to production table */
  public short[][] production_table() {return _production_table;}

  /** parse action table */
  protected static final short[][] _action_table = {
    /*0*/{1,17,9,22,10,13,14,16,15,3,16,6,17,9,18,12,19,18,20,8,21,14,22,5,23,19,24,23,25,4,26,15,27,2,28,11,31,21,32,20,-1,0},
    /*1*/{7,32,12,28,14,27,29,29,30,30,-1,0},
    /*2*/{20,-27,-1,0},
    /*3*/{30,25,-1,0},
    /*4*/{20,-10,-1,0},
    /*5*/{20,-26,-1,0},
    /*6*/{20,86,-1,0},
    /*7*/{0,-5,9,-5,10,-5,14,-5,15,-5,16,-5,17,-5,18,-5,19,-5,21,-5,22,-5,23,-5,24,-5,25,-5,26,-5,27,-5,28,-5,31,-5,32,-5,-1,0},
    /*8*/{12,75,14,74,30,76,-1,0},
    /*9*/{0,72,9,22,10,13,14,16,15,3,16,6,17,9,18,12,19,18,21,14,22,5,23,19,24,23,25,4,26,15,27,2,28,11,31,21,32,20,-1,0},
    /*10*/{30,70,-1,0},
    /*11*/{7,32,12,28,14,27,29,29,30,30,-1,0},
    /*12*/{20,-19,-1,0},
    /*13*/{30,66,-1,0},
    /*14*/{20,-21,-1,0},
    /*15*/{30,62,-1,0},
    /*16*/{0,-4,9,-4,10,-4,14,-4,15,-4,16,-4,17,-4,18,-4,19,-4,21,-4,22,-4,23,-4,24,-4,25,-4,26,-4,27,-4,28,-4,31,-4,32,-4,-1,0},
    /*17*/{7,32,12,28,14,27,29,29,30,30,-1,0},
    /*18*/{7,32,12,28,14,27,29,29,30,30,-1,0},
    /*19*/{7,32,12,28,14,27,20,-13,29,29,30,30,-1,0},
    /*20*/{7,32,12,28,14,27,29,29,30,30,-1,0},
    /*21*/{20,-20,-1,0},
    /*22*/{30,25,-1,0},
    /*23*/{20,-14,30,26,-1,0},
    /*24*/{20,-30,30,-30,-1,0},
    /*25*/{20,-31,30,-31,-1,0},
    /*26*/{30,50,-1,0},
    /*27*/{7,32,12,28,14,27,29,29,30,30,-1,0},
    /*28*/{2,-32,3,-32,4,-32,5,-32,7,-32,8,-32,11,-32,12,-32,13,-32,14,-32,20,-32,29,-32,30,-32,-1,0},
    /*29*/{2,-33,3,-33,4,-33,5,-33,7,-33,8,-33,11,-33,12,-33,13,-33,14,-33,20,-33,29,-33,30,-33,-1,0},
    /*30*/{7,32,12,28,14,27,29,29,30,30,-1,0},
    /*31*/{3,33,7,32,12,28,14,27,29,29,30,30,-1,0},
    /*32*/{3,33,7,32,12,28,14,27,29,29,30,30,-1,0},
    /*33*/{2,-38,3,-38,4,-38,5,-38,8,-38,-1,0},
    /*34*/{2,38,3,36,4,40,5,39,8,37,-1,0},
    /*35*/{3,33,7,32,12,28,14,27,29,29,30,30,-1,0},
    /*36*/{2,-34,3,-34,4,-34,5,-34,7,-34,8,-34,11,-34,12,-34,13,-34,14,-34,20,-34,29,-34,30,-34,-1,0},
    /*37*/{3,33,7,32,12,28,14,27,29,29,30,30,-1,0},
    /*38*/{3,33,7,32,12,28,14,27,29,29,30,30,-1,0},
    /*39*/{3,33,7,32,12,28,14,27,29,29,30,30,-1,0},
    /*40*/{2,-41,3,-41,4,-41,5,-41,8,-41,-1,0},
    /*41*/{2,-42,3,-42,4,-42,5,-42,8,-42,-1,0},
    /*42*/{2,-39,3,-39,4,40,5,39,8,-39,-1,0},
    /*43*/{2,-40,3,-40,4,40,5,39,8,-40,-1,0},
    /*44*/{2,-43,3,-43,4,-43,5,-43,8,-43,-1,0},
    /*45*/{20,-11,-1,0},
    /*46*/{7,32,12,28,14,27,29,29,30,30,-1,0},
    /*47*/{11,49,-1,0},
    /*48*/{2,-37,3,-37,4,-37,5,-37,7,-37,8,-37,11,-37,12,-37,13,-37,14,-37,20,-37,29,-37,30,-37,-1,0},
    /*49*/{7,32,12,28,13,53,14,27,29,29,30,30,-1,0},
    /*50*/{7,-28,12,-28,13,-28,14,-28,20,-28,29,-28,30,-28,-1,0},
    /*51*/{7,32,12,28,13,55,14,27,29,29,30,30,-1,0},
    /*52*/{2,-36,3,-36,4,-36,5,-36,7,-36,8,-36,11,-36,12,-36,13,-36,14,-36,20,-36,29,-36,30,-36,-1,0},
    /*53*/{7,-29,12,-29,13,-29,14,-29,20,-29,29,-29,30,-29,-1,0},
    /*54*/{2,-35,3,-35,4,-35,5,-35,7,-35,8,-35,11,-35,12,-35,13,-35,14,-35,20,-35,29,-35,30,-35,-1,0},
    /*55*/{7,32,12,28,14,27,20,-12,29,29,30,30,-1,0},
    /*56*/{7,32,12,28,14,27,29,29,30,30,-1,0},
    /*57*/{7,32,12,28,14,27,29,29,30,30,-1,0},
    /*58*/{7,32,12,28,14,27,29,29,30,30,-1,0},
    /*59*/{20,-18,-1,0},
    /*60*/{20,-17,-1,0},
    /*61*/{7,32,12,28,13,64,14,27,29,29,30,30,-1,0},
    /*62*/{7,32,12,28,13,65,14,27,29,29,30,30,-1,0},
    /*63*/{20,-25,-1,0},
    /*64*/{20,-24,-1,0},
    /*65*/{7,32,12,28,14,27,29,29,30,30,-1,0},
    /*66*/{7,32,12,28,14,27,29,29,30,30,-1,0},
    /*67*/{20,-9,-1,0},
    /*68*/{20,-16,-1,0},
    /*69*/{20,-22,-1,0},
    /*70*/{20,73,-1,0},
    /*71*/{0,-2,-1,0},
    /*72*/{0,-3,9,-3,10,-3,14,-3,15,-3,16,-3,17,-3,18,-3,19,-3,21,-3,22,-3,23,-3,24,-3,25,-3,26,-3,27,-3,28,-3,31,-3,32,-3,-1,0},
    /*73*/{30,82,-1,0},
    /*74*/{7,32,12,28,14,27,29,29,30,30,-1,0},
    /*75*/{7,32,12,28,14,27,29,29,30,30,-1,0},
    /*76*/{20,-6,-1,0},
    /*77*/{7,32,12,28,14,27,29,29,30,30,-1,0},
    /*78*/{11,80,-1,0},
    /*79*/{7,32,12,28,14,27,29,29,30,30,-1,0},
    /*80*/{20,-8,-1,0},
    /*81*/{7,32,12,28,14,27,29,29,30,30,-1,0},
    /*82*/{7,32,12,28,13,84,14,27,29,29,30,30,-1,0},
    /*83*/{7,32,12,28,14,27,29,29,30,30,-1,0},
    /*84*/{20,-7,-1,0},
    /*85*/{0,-1,9,-1,10,-1,14,-1,15,-1,16,-1,17,-1,18,-1,19,-1,21,-1,22,-1,23,-1,24,-1,25,-1,26,-1,27,-1,28,-1,31,-1,32,-1,-1,0},
    /*86*/{20,-15,30,26,-1,0},
    /*87*/{20,-23,-1,0},
  };

  /** access to parse action table */
  public short[][] action_table() {return _action_table;}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = {
    /*0*/{1,9,2,6,-1,-1},
    /*1*/{6,87,-1,-1},
    /*2*/{-1,-1},
    /*3*/{4,86,-1,-1},
    /*4*/{-1,-1},
    /*5*/{-1,-1},
    /*6*/{-1,-1},
    /*7*/{-1,-1},
    /*8*/{-1,-1},
    /*9*/{2,70,-1,-1},
    /*10*/{-1,-1},
    /*11*/{6,68,-1,-1},
    /*12*/{-1,-1},
    /*13*/{-1,-1},
    /*14*/{-1,-1},
    /*15*/{-1,-1},
    /*16*/{-1,-1},
    /*17*/{6,60,-1,-1},
    /*18*/{6,56,-1,-1},
    /*19*/{3,55,6,50,-1,-1},
    /*20*/{6,30,-1,-1},
    /*21*/{-1,-1},
    /*22*/{4,23,-1,-1},
    /*23*/{-1,-1},
    /*24*/{-1,-1},
    /*25*/{-1,-1},
    /*26*/{-1,-1},
    /*27*/{6,46,-1,-1},
    /*28*/{-1,-1},
    /*29*/{-1,-1},
    /*30*/{6,45,-1,-1},
    /*31*/{5,34,6,33,-1,-1},
    /*32*/{5,44,6,33,-1,-1},
    /*33*/{-1,-1},
    /*34*/{-1,-1},
    /*35*/{5,43,6,33,-1,-1},
    /*36*/{-1,-1},
    /*37*/{5,42,6,33,-1,-1},
    /*38*/{5,41,6,33,-1,-1},
    /*39*/{5,40,6,33,-1,-1},
    /*40*/{-1,-1},
    /*41*/{-1,-1},
    /*42*/{-1,-1},
    /*43*/{-1,-1},
    /*44*/{-1,-1},
    /*45*/{-1,-1},
    /*46*/{6,47,-1,-1},
    /*47*/{-1,-1},
    /*48*/{-1,-1},
    /*49*/{3,51,6,50,-1,-1},
    /*50*/{-1,-1},
    /*51*/{6,53,-1,-1},
    /*52*/{-1,-1},
    /*53*/{-1,-1},
    /*54*/{-1,-1},
    /*55*/{6,53,-1,-1},
    /*56*/{6,57,-1,-1},
    /*57*/{6,58,-1,-1},
    /*58*/{6,59,-1,-1},
    /*59*/{-1,-1},
    /*60*/{-1,-1},
    /*61*/{3,62,6,50,-1,-1},
    /*62*/{6,53,-1,-1},
    /*63*/{-1,-1},
    /*64*/{-1,-1},
    /*65*/{6,66,-1,-1},
    /*66*/{6,67,-1,-1},
    /*67*/{-1,-1},
    /*68*/{-1,-1},
    /*69*/{-1,-1},
    /*70*/{-1,-1},
    /*71*/{-1,-1},
    /*72*/{-1,-1},
    /*73*/{-1,-1},
    /*74*/{6,77,-1,-1},
    /*75*/{6,76,-1,-1},
    /*76*/{-1,-1},
    /*77*/{6,78,-1,-1},
    /*78*/{-1,-1},
    /*79*/{6,80,-1,-1},
    /*80*/{-1,-1},
    /*81*/{3,82,6,50,-1,-1},
    /*82*/{6,53,-1,-1},
    /*83*/{6,84,-1,-1},
    /*84*/{-1,-1},
    /*85*/{-1,-1},
    /*86*/{-1,-1},
    /*87*/{-1,-1},
  };

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$parser$actions action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions();
    }

  /** invoke a user supplied parse action */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 1;}

  /** EOF Symbol index */
  public int EOF_sym() {return 0;}

  /** error Symbol index */
  public int error_sym() {return 1;}


  /** user initialization */
  public void user_init() throws java.lang.Exception
    {

	char ch;
	StringBuffer sb = new StringBuffer();
	//s = new String(DrawSpace.parseString);
	StringBufferInputStream strStream = new StringBufferInputStream(parseString);
	DataInputStream inStream = new DataInputStream(strStream);
	yyScan = new Yylex(inStream);
	action_obj.ds = this.ds;
	syntaxErrorHappened = false;
	if(cb!=null) yyScan.pushCodeBlock(cb);
	else yyScan.cleanTables();

    }

  /** scan to get the next Symbol */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
	if(delay!=0) {
		try {thisThread.sleep(delay); }
		catch (Exception e) {}
	}
	return yyScan.tomScan(); 

    }

 
	public Yylex yyScan;
	public int delay=0;
	public int value = 0;
	Thread thisThread = Thread.currentThread( );
	String s;
	DrawSpace ds;
	public void setDrawSpace(DrawSpace draw) {this.ds = draw;}
	public String outputString = new String();
	public boolean syntaxErrorHappened;
	public String firstError;
	public void syntax_error(Symbol cur_token) {
		String output;
		
		output = new String("symbol " + cur_token.sym);
		if(cur_token.value != null) output = output.concat(", with Object " + cur_token.value);
		if(cur_token.left != -1) output = output.concat(", with left " + cur_token.left);
		if(cur_token.right != -1) output = output.concat(", with right " + cur_token.right);
		output = output.concat(".");
		if(!syntaxErrorHappened) {
			syntaxErrorHappened = true;
			System.err.println("First syntax error: " + output);
			firstError = new String(output);
			ds.syntaxError(output);
		}
	}
	String parseString=null;
	public void setParseString(String s) {
		parseString = new String(s);
	}
	codeBlock cb=null;
	public void setCodeBlock(codeBlock cb) {
		this.cb = cb;
	}
	public int getValue() {
		return value;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	public DrawSpace ds;
	public Vector names = new Vector();
	public Vector numbers = new Vector();
	public Vector emptyVector = new Vector();
	/* This is actionCode */


  /** Constructor */
  CUP$parser$actions() { }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= MINUS expr 
            {
              Integer RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(0 - e.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr DIVIDE expr 
            {
              Integer RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(e1.intValue() / e2.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr TIMES expr 
            {
              Integer RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(e1.intValue() * e2.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr MINUS expr 
            {
              Integer RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(e1.intValue() - e2.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr PLUS expr 
            {
              Integer RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(e1.intValue() + e2.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= simple_expr 
            {
              Integer RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(e.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // simple_expr ::= LBRACKET simple_expr simple_expr RBRACKET 
            {
              Integer RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = new Integer (ds.getDot(e1.intValue(), e2.intValue()));
			
              CUP$parser$result = new java_cup.runtime.Symbol(6/*simple_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // simple_expr ::= LBRACE NAME RBRACE 
            {
              Integer RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
				if(ds.hasConnector(n)) 
					RESULT = new Integer (ds.getConnector(n, emptyVector)); 
				else {
					parser myParser = (parser)CUP$parser$parser;
					RESULT =  new Integer (myParser.yyScan.runFunction(n, emptyVector));				
				}
				numbers.removeAllElements();				
			
              CUP$parser$result = new java_cup.runtime.Symbol(6/*simple_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // simple_expr ::= LBRACE NAME simple_expr_list RBRACE 
            {
              Integer RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
				if(ds.hasConnector(n)) 
					RESULT = new Integer (ds.getConnector(n, numbers)); 
				else {
					parser myParser = (parser)CUP$parser$parser;
					RESULT =  new Integer (myParser.yyScan.runFunction(n, numbers));				
				}
				numbers.removeAllElements();				
			
              CUP$parser$result = new java_cup.runtime.Symbol(6/*simple_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // simple_expr ::= LPAREN expr RPAREN 
            {
              Integer RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*simple_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // simple_expr ::= NAME 
            {
              Integer RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
				parser myParser = (parser)CUP$parser$parser;
				RESULT = new Integer(myParser.yyScan.getVariable(n)); 
			
              CUP$parser$result = new java_cup.runtime.Symbol(6/*simple_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // simple_expr ::= INTEGER 
            {
              Integer RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = n; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*simple_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // name_list ::= name_list NAME 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 names.addElement(new String (n)); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*name_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // name_list ::= NAME 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			names.addElement(new String(n)); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*name_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // simple_expr_list ::= simple_expr_list simple_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 numbers.addElement(new Integer(e.intValue())); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*simple_expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // simple_expr_list ::= simple_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 numbers.addElement(new Integer(e.intValue())); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*simple_expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= RBLOCK 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= LBLOCK 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= LBRACE NAME RBRACE 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
				if(ds.hasConnector(n)) 
					ds.getConnector(n, emptyVector); 
				else {
					parser myParser = (parser)CUP$parser$parser;
					myParser.yyScan.runFunction(n, emptyVector);				
				}
				numbers.removeAllElements();				
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= LBRACE NAME simple_expr_list RBRACE 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
				if(ds.hasConnector(n)) 
					ds.getConnector(n, numbers); 
				else {
					parser myParser = (parser)CUP$parser$parser;
					myParser.yyScan.runFunction(n, numbers);				
				}
				numbers.removeAllElements();				
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= VALUE simple_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				 parser myParser = (parser)CUP$parser$parser;
				 myParser.value = e.intValue();
				 myParser.done_parsing();
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= LOAD NAME 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				ds.doLoad(n);
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= ESCAPE 
            {
              Object RESULT = null;
		 
				parser myParser = (parser)CUP$parser$parser;
				myParser.yyScan.doBreak();				
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= ALIAS 
            {
              Object RESULT = null;
		 ds.setAlias(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= ANTIALIAS 
            {
              Object RESULT = null;
		 ds.setAntialias(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= LINE simple_expr simple_expr simple_expr simple_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e4 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				ds.drawLine(e1.intValue(), e2.intValue(), e3.intValue(), e4.intValue());
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= PEN simple_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 ds.setPen(e.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= PAPER simple_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 ds.setPaper(e.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= NUMBER name_list 
            {
              Object RESULT = null;
		
				//for(int i=0;i<names.size();i++) {
				//	System.out.println("Command ! ("+i+") = "+(String)names.elementAt(i));
				//}
				parser myParser = (parser)CUP$parser$parser;
				myParser.yyScan.saveFunction(names, ds);				
				names.removeAllElements();				
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= COMMAND name_list 
            {
              Object RESULT = null;
		
				//for(int i=0;i<names.size();i++) {
				//	System.out.println("Command ! ("+i+") = "+(String)names.elementAt(i));
				//}
				parser myParser = (parser)CUP$parser$parser;
				myParser.yyScan.saveCommand(names, ds);				
				names.removeAllElements();				
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= COMMANDNAME 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				//System.out.println("Command ["+c+"]");
				parser myParser = (parser)CUP$parser$parser;
				names.removeAllElements();				
				myParser.yyScan.runCommand(c, emptyVector);				
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= COMMANDNAME simple_expr_list 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				//for(int i=0;i<numbers.size();i++) {
				//	System.out.println("Command ["+c+"] ("+i+") = "+((Integer)numbers.elementAt(i)).intValue());
				//}
				parser myParser = (parser)CUP$parser$parser;
				myParser.yyScan.runCommand(c, numbers);
				numbers.removeAllElements();				
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= QUESTION simple_expr simple_expr 
            {
              Object RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				parser myParser = (parser)CUP$parser$parser;
				myParser.yyScan.doConditional(q, e1.intValue(), e2.intValue(), ds);
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= FOREVER 
            {
              Object RESULT = null;
		
				parser myParser = (parser)CUP$parser$parser;
				myParser.yyScan.doRepeat(true, "", 0, 0, ds);
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= REPEAT NAME simple_expr simple_expr 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				/* do nothing*/
				parser myParser = (parser)CUP$parser$parser;
				myParser.yyScan.doRepeat(false, n, e1.intValue(), e2.intValue(), ds);
				/**/
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= SET LBRACKET simple_expr simple_expr RBRACKET simple_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				ds.setDot(e1.intValue(), e2.intValue(), e3.intValue());
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= SET LBRACE NAME simple_expr_list RBRACE simple_expr 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				ds.setConnector(n, numbers, e2.intValue());
				numbers.removeAllElements();				
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= SET NAME simple_expr 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
				parser myParser = (parser)CUP$parser$parser;
				myParser.yyScan.setVariable(n, e.intValue()); 
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement_list ::= RETURN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_list ::= error 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_list ::= statement_list statement RETURN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= statement_list EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // statement_list ::= statement RETURN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

