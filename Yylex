import java.lang.System;
import java.util.Vector;
import java.util.Hashtable;
import java_cup.runtime.*;

%%

%{
	Vector callStack = new Vector(10);
	static Hashtable commands = new Hashtable();
	static Hashtable functions = new Hashtable();
	static Hashtable variables = new Hashtable();
	public boolean doEscape = false;
	
	public void cleanTables() {
		//System.out.println("Cleaning the tables");

		commands = new Hashtable();
		functions = new Hashtable();
		variables = new Hashtable();
	}		

	public Symbol tomScan() throws java.io.IOException {
		codeBlock block;
		Symbol s;
		
		if(callStack.isEmpty())
			return yylex();
		else {
			if(doEscape) {
				doEscape = false;

				block = (codeBlock)callStack.lastElement();
				callStack.removeElementAt(callStack.size()-1);

				while (block.isConditional && !callStack.isEmpty()) {							
					block = (codeBlock)callStack.lastElement();
					callStack.removeElementAt(callStack.size()-1);
				}

				for(;;) {
					s = tomScan();
					// don't return RETURNs
					if(s.sym != sym.RETURN) return(s);
				}
			}

			//System.out.println("Reading symbol from storage");
			block = (codeBlock)callStack.lastElement();
			if(block.curSymbol >= block.symbols.size()) {
				// we have reached the end of the block
				if(block.isForever) 
					// just move to after the first brace
					// in the future check for escape
					block.curSymbol = 0;
				else if(block.runOnceOnly) {
					// just end it here
					callStack.removeElementAt(callStack.size()-1);
					for(;;) {
						s = tomScan();
						// don't return RETURNs
						if(s.sym != sym.RETURN) return(s);
					}
				}					
				else {
					block.curval += block.stepval;
					setVariable(block.variable, block.curval);
					if((block.testLess && block.curval < block.endval) ||
						(!block.testLess && block.curval > block.endval)) {
						//System.out.println("this block is all done");
						// we are all done with this repeat loop
						callStack.removeElementAt(callStack.size()-1);
						//Thread thread = Thread.currentThread( );
						//try {thread.sleep(100);} catch (Exception e) {}
						for(;;) {
							s = tomScan();
							// don't return RETURNs
							if(s.sym != sym.RETURN) return(s);
						}
					}
					else {
						//System.out.println("Reached end of block, returning to top:("+block.curval+","+block.endval+","+block.testLess+")");
						// just move to after the first brace
						block.curSymbol = 0;
					}
				}
			}
			// now we have insured block.curSymbol is valid
			s = (Symbol)(block.symbols.elementAt(block.curSymbol));
			//System.out.println("Returning the "+block.curSymbol+"th element = "+s);
			++block.curSymbol;
			return s;
		}
	}	
			
	Hashtable resolveVariable(String name) {
		codeBlock block;
		Hashtable vars;
		boolean quit=false;
		
		if(!callStack.isEmpty()) {
			block = (codeBlock)callStack.lastElement();
			while(!quit) {
				if(block.variables != null) {
					vars = block.variables;
					if(vars.containsKey(name))
						return (vars);
				}
				if(block.parent == null) quit = true;
				else block = block.parent;
			}
		}
		if(variables.containsKey(name))
			return(variables);
		else
			return null;
	}

	Hashtable createNewVariable(String name) {
		codeBlock block;
		Hashtable vars;
		Integer newGuy = new Integer(0);
		boolean quit=false;
		
		if(!callStack.isEmpty()) {
			block = (codeBlock)callStack.lastElement();
			while(!quit) {
				if(block.variables != null) {
					vars = block.variables;
					vars.put(name, newGuy);
					return(vars);
				}
				if(block.parent == null) quit = true;
				else block = block.parent;
			}
		}
		variables.put(name, newGuy);
		return(variables);
	}


	public void doBreak() {
		doEscape = true;
	}
	
	/*
	Hashtable nevergetCurrentVariables() {
		codeBlock block;
		Hashtable vars;
		
		if(callStack.isEmpty())
			vars = variables;
		else {
			//System.out.println("Reading symbol from storage");
			block = (codeBlock)callStack.lastElement();
			if(block.variables != null) vars = block.variables;
			else vars = variables;
		}
		return vars;
	}

	public int nevergetVariable(String varName) {
		Hashtable v = getCurrentVariables();

		//System.out.println("getVariable("+varName+") called");
		if(!v.containsKey(varName)) {
			setVariable(varName, 0);
			//System.out.println("No key for " + varName + ", initing to 0");
			//Integer newEntry = new Integer(0);
			//variables.put(varName, newEntry);
		}
		//System.out.println("Returning " + varName + "=" + variables.get(varName));
		return ((Integer) v.get(varName)).intValue();
	}
	
	public void neversetVariable(String varName, int varValue) {
		Hashtable v = getCurrentVariables();

		//System.out.println("setVariable("+varName+","+varValue+") called");
		Integer newEntry = new Integer(varValue);
		v.put(varName, newEntry);
	}
	*/
	
	public int getVariable(String varName) {
		Integer varInt;
		Hashtable vars;
		
		vars = resolveVariable(varName);
		if(vars == null) vars = createNewVariable(varName);
		return ((Integer) vars.get(varName)).intValue();
	}
	
	public void setVariable(String varName, int varValue) {
		Integer varInt;
		Hashtable vars;
		
		vars = resolveVariable(varName);
		if(vars == null) vars = createNewVariable(varName);
		varInt = new Integer(varValue);
		vars.put(varName, varInt);
	}	
	
	public void doRepeat(boolean forever, String variable, int from, int to, DrawSpace ds) {
		boolean haveStarted = false;
		int braceCount = 0;
		Symbol s;
		codeBlock cb=null;
		
		//System.out.println("Setting up repeat loop for "+variable+" from "+from+" to "+to+".");
		while (!haveStarted || braceCount!=0) {
			try {s = tomScan();}
			catch (Exception e) {
				System.err.println("Exceptionn getting next token in repeat: " + e);
				return;
			}
			if(!haveStarted && s.sym == sym.RETURN) continue;
			else if(!haveStarted && s.sym == sym.LBLOCK) {
				//System.out.println("setting up codeblock");
				// begin a new block of symbols
				// first allocate and compute a codeBlock
				haveStarted = true;
				braceCount = 1;
				cb = new codeBlock();
				cb.symbols = new Vector(30);
				cb.curSymbol = 0;
				cb.ds = ds;
				cb.runOnceOnly = false;
				if(forever) {
					cb.isForever = true;
					cb.testLess = false;
					cb.variable = "";
					cb.curval = 0;
					cb.endval = 0;
					cb.stepval = 0;
					cb.variables = null;
				}
				else {
					cb.isForever = false;
					cb.testLess = (from > to);
					cb.variable = new String(variable);
					cb.curval = from;
					cb.endval = to;
					if(cb.testLess) cb.stepval = -1;
					else cb.stepval = 1;
					cb.variables = new Hashtable(1);
					cb.variables.put(cb.variable, new Integer(cb.curval));
				}
			}
			else if(!haveStarted) {
				System.err.println("I was expecting { to start my repeat loop, but I got " + s);
				return;
			}	
			else {
				// record next symbol
				if(s.sym == sym.LBLOCK) {
					++braceCount;
					cb.symbols.addElement(s);
				}
				else if(s.sym == sym.RBLOCK) {
					--braceCount;
					if(braceCount != 0) cb.symbols.addElement(s);
				}
				else if(s.sym == sym.RETURN && cb.symbols.isEmpty()) {
					/* do not record initial RETURN */
				}
				else {
					//System.out.println("Recording normal element "+s);
					cb.symbols.addElement(s);
				}
			}
		}
		if(!callStack.isEmpty()) cb.parent = (codeBlock)callStack.lastElement();
		else cb.parent = null;
		// codeBlock is all set up, push it on the call stack
		callStack.addElement(cb);
		//System.out.println("Repeat loop set up done, "+cb.symbols.size()+" elements added, callstack size is " + callStack.size());
	}

	public void doConditional(String question, int val1, int val2, DrawSpace ds) {
		boolean haveStarted = false, conditionalState = false;
		int braceCount = 0;
		Symbol s;
		codeBlock cb=null;

		if(question.equalsIgnoreCase("smaller?") && val1 < val2) 
			conditionalState = true;
		else if(question.equalsIgnoreCase("notsmaller?") && !(val1 < val2)) 
			conditionalState = true;
		else if(question.equalsIgnoreCase("bigger?") && val1 > val2) 
			conditionalState = true;
		else if(question.equalsIgnoreCase("notbigger?") && !(val1 > val2)) 
			conditionalState = true;
		else if(question.equalsIgnoreCase("notsame?") && val1 != val2)
			conditionalState = true;
		else if(question.equalsIgnoreCase("same?") && val1 == val2)
			conditionalState = true;

		//System.out.println("Question: " + question + "("+val1+","+val2+") is " + conditionalState);
		//System.out.println("Setting up repeat loop for "+variable+" from "+from+" to "+to+".");

		if(!conditionalState) {
			// gobbler everything up
			while(!haveStarted || braceCount != 0) {
				try {s = tomScan();}
				catch (Exception e) {
					System.err.println("Exception gobbling next token in conditional: " + e);
					return;
				}
				if(!haveStarted && s.sym == sym.LBLOCK) {
					haveStarted = true;
					braceCount = 1;
				}
				else if(s.sym == sym.LBLOCK) ++braceCount;
				else if(s.sym == sym.RBLOCK) --braceCount;
				//System.out.println("eating " + s);
			}
			for(s=new Symbol(sym.PEN);s.sym!=sym.EOF && s.sym!=sym.error;) {
				try {s=tomScan();} catch(Exception e) {
					System.err.println("Problem gobbling the last return in conditional");
					return;
				}
				if(s.sym != sym.RETURN)
					System.err.println("I swallowed symbol " + s + " because I expect a return after my close brace");
				else				
					return;
			}
		}

		//System.out.println("Must be true");
		while (!haveStarted || braceCount!=0) {
			try {s = tomScan();}
			catch (Exception e) {
				System.err.println("Exception getting next token in conditional: " + e);
				return;
			}
			if(!haveStarted && s.sym == sym.RETURN) continue;
			else if(!haveStarted && s.sym == sym.LBLOCK) {
				//System.out.println("setting up codeblock");
				// begin a new block of symbols
				// first allocate and compute a codeBlock
				haveStarted = true;
				braceCount = 1;
				cb = new codeBlock();
				cb.symbols = new Vector(30);
				cb.curSymbol = 0;
				cb.ds = ds;
				cb.variables = null;
				cb.runOnceOnly = true;
				cb.isForever = false;
				cb.testLess = false;
				cb.isConditional = true;
				cb.variable = question;
				cb.curval = 0;
				cb.endval = 0;
				cb.stepval = 0;
			}
			else if(!haveStarted) {
				System.err.println("I was expecting { to start my repeat loop, but I got " + s);
				return;
			}	
			else {
				// record next symbol
				if(s.sym == sym.LBLOCK) {
					++braceCount;
					cb.symbols.addElement(s);
				}
				else if(s.sym == sym.RBLOCK) {
					--braceCount;
					if(braceCount != 0) cb.symbols.addElement(s);
				}
				else if(s.sym == sym.RETURN && cb.symbols.isEmpty()) {
					/* do not record initial RETURN */
				}
				else {
					//System.out.println("Recording normal element "+s);
					cb.symbols.addElement(s);
				}
			}
		}
		// codeBlock is all set up, push it on the call stack
		if(!callStack.isEmpty()) cb.parent = (codeBlock)callStack.lastElement();
		else cb.parent = null;
		callStack.addElement(cb);
		//System.out.println("Repeat loop set up done, "+cb.symbols.size()+" elements added, callstack size is " + callStack.size());
	}

	public void saveCommand(Vector args, DrawSpace ds) {
		boolean haveStarted = false;
		int braceCount = 0, i;
		Symbol s;
		codeBlock cb=null;
		String commandName;
		
		if(args.size() < 1) {
			System.err.println("I don't know the name of the command to save.");
			return;
		}
		commandName = (String)args.elementAt(0);
		
		//System.out.println("Must be true");
		while (!haveStarted || braceCount!=0) {
			try {s = tomScan();}
			catch (Exception e) {
				System.err.println("Exception getting next token in conditional: " + e);
				return;
			}
			if(!haveStarted && s.sym == sym.RETURN) continue;
			else if(!haveStarted && s.sym == sym.LBLOCK) {
				//System.out.println("setting up codeblock");
				// begin a new block of symbols
				// first allocate and compute a codeBlock
				haveStarted = true;
				braceCount = 1;
				cb = new codeBlock();
				cb.symbols = new Vector(30);
				cb.curSymbol = 0;
				cb.ds = ds;
				cb.runOnceOnly = true;
				cb.isForever = false;
				cb.testLess = false;
				cb.variable = "";
				cb.curval = 0;
				cb.endval = 0;
				cb.stepval = 0;
				if(args != null) {
					cb.variableNames = new Vector();
					for(i=1;i<args.size();i++) {
						cb.variableNames.addElement(new String((String)args.elementAt(i)));
					}
				}
			}
			else if(!haveStarted) {
				System.err.println("I was expecting { to start my repeat loop, but I got " + s);
				return;
			}	
			else {
				// record next symbol
				if(s.sym == sym.LBLOCK) {
					++braceCount;
					cb.symbols.addElement(s);
				}
				else if(s.sym == sym.RBLOCK) {
					--braceCount;
					if(braceCount != 0) cb.symbols.addElement(s);
				}
				else if(s.sym == sym.RETURN && cb.symbols.isEmpty()) {
					/* do not record initial RETURN */
				}
				else {
					//System.out.println("Recording normal element "+s);
					cb.symbols.addElement(s);
				}
			}
		}
		// add this command to list of commands
		commands.put(commandName, cb);

		for(s=new Symbol(sym.PEN);s.sym!=sym.EOF && s.sym!=sym.error;) {
			try {s=tomScan();} catch(Exception e) {
				System.err.println("Problem gobbling the last return in conditional");
				return;
			}
			if(s.sym != sym.RETURN)
				System.err.println("I swallowed symbol " + s + " because I expect a return after my close brace");
			else				
				return;
		}
		//System.out.println("Repeat loop set up done, "+cb.symbols.size()+" elements added, callstack size is " + callStack.size());
	}

	public void saveFunction(Vector args, DrawSpace ds) {
		boolean haveStarted = false;
		int braceCount = 0, i;
		Symbol s;
		codeBlock cb=null;
		String commandName;
		
		if(args.size() < 1) {
			System.err.println("I don't know the name of the function to save.");
			return;
		}
		commandName = (String)args.elementAt(0);
		
		//System.out.println("Must be true");
		while (!haveStarted || braceCount!=0) {
			try {s = tomScan();}
			catch (Exception e) {
				System.err.println("Exception getting next token in conditional: " + e);
				return;
			}
			if(!haveStarted && s.sym == sym.RETURN) continue;
			else if(!haveStarted && s.sym == sym.LBLOCK) {
				//System.out.println("setting up codeblock");
				// begin a new block of symbols
				// first allocate and compute a codeBlock
				haveStarted = true;
				braceCount = 1;
				cb = new codeBlock();
				cb.symbols = new Vector(30);
				cb.curSymbol = 0;
				cb.ds = ds;
				cb.runOnceOnly = true;
				cb.isForever = false;
				cb.testLess = false;
				cb.variable = "";
				cb.curval = 0;
				cb.endval = 0;
				cb.stepval = 0;
				if(args != null) {
					cb.variableNames = new Vector();
					for(i=1;i<args.size();i++) {
						cb.variableNames.addElement(new String((String)args.elementAt(i)));
					}
				}
			}
			else if(!haveStarted) {
				System.err.println("I was expecting { to start my repeat loop, but I got " + s);
				return;
			}	
			else {
				// record next symbol
				if(s.sym == sym.LBLOCK) {
					++braceCount;
					cb.symbols.addElement(s);
				}
				else if(s.sym == sym.RBLOCK) {
					--braceCount;
					if(braceCount != 0) cb.symbols.addElement(s);
				}
				else if(s.sym == sym.RETURN && cb.symbols.isEmpty()) {
					/* do not record initial RETURN */
				}
				else {
					//System.out.println("Recording normal element "+s);
					cb.symbols.addElement(s);
				}
			}
		}
		// add this command to list of commands
		functions.put(commandName, cb);
		//System.out.println("I just saved function " + commandName);

		for(s=new Symbol(sym.PEN);s.sym!=sym.EOF && s.sym!=sym.error;) {
			try {s=tomScan();} catch(Exception e) {
				System.err.println("Problem gobbling the last return in conditional");
				return;
			}
			if(s.sym != sym.RETURN)
				System.err.println("I swallowed symbol " + s + " because I expect a return after my close brace");
			else				
				return;
		}
		//System.out.println("Repeat loop set up done, "+cb.symbols.size()+" elements added, callstack size is " + callStack.size());
	}

	public int runFunction(String command, Vector args) {
		parser parser_obj;
		Symbol parse_tree;

		codeBlock cb;
		
		//System.out.println("Trying to run " + command + " + with args " + args);
		if(!functions.containsKey(command)) {
			System.err.println("no function named " + command);
			return 0;
		}
		cb = (codeBlock)functions.get(command);
		cb.variables = new Hashtable(5);
		for(int i=0;i<cb.variableNames.size();i++) {
			if(args.size() < i+1) {
				System.err.println("only " + args.size() + " arguments given for command " + 
					command + " but I need " + cb.variableNames.size() + " arguments.");
				return 0;
			}
			cb.variables.put(cb.variableNames.elementAt(i), (Integer)args.elementAt(i));
			//System.out.println("Saving "+cb.variableNames.elementAt(i)+" as "+(Integer)args.elementAt(i));
		}
		cb.curSymbol = 0;
		if(!callStack.isEmpty()) cb.parent = (codeBlock)callStack.lastElement();
		else cb.parent = null;

 		parser_obj = new parser();
		parse_tree = null;
		parser_obj.setCodeBlock(cb);
		parser_obj.setDrawSpace(cb.ds);
		parser_obj.setParseString("\n");
		try {parse_tree = parser_obj.parse();}
		catch (Exception e) {
			System.out.println("" + command + " parsin' err: " +e);
		}
		return parser_obj.getValue();
	}		

	public void runCommand(String command, Vector args) {
		codeBlock cb;
		
		if(!commands.containsKey(command)) {
			System.err.println("no command named " + command);
			return;
		}
		cb = (codeBlock)commands.get(command);
		cb.variables = new Hashtable(5);
		for(int i=0;i<cb.variableNames.size();i++) {
			if(args.size() < i+1) {
				System.err.println("only " + args.size() + " arguments given for command " + 
					command + " but I need " + cb.variableNames.size() + " arguments.");
				return;
			}
			cb.variables.put(cb.variableNames.elementAt(i), (Integer)args.elementAt(i));
			//System.out.println("Saving "+cb.variableNames.elementAt(i)+" as "+(Integer)args.elementAt(i));
		}
		cb.curSymbol = 0;
		if(!callStack.isEmpty()) cb.parent = (codeBlock)callStack.lastElement();
		else cb.parent = null;
		callStack.addElement(cb);
	}		

	public void pushCodeBlock(codeBlock cb) {
		//System.out.println("Pushing code block");
		callStack.addElement(cb);
	}
%}
	
%cup
%eofval{ 
return (new Symbol(sym.EOF)); 
%eofval} 
%type Symbol
%notunix

DIGIT=[0-9]
WHITE_SPACE_CHAR=[\ \t\b]
RETURN_CHAR=[\r\n]

%% 

<YYINITIAL> {WHITE_SPACE_CHAR}+ { }
<YYINITIAL> {RETURN_CHAR}+ { return new Symbol(sym.RETURN); }
<YYINITIAL> "+" { return (new Symbol(sym.PLUS)); }
<YYINITIAL> "-" { return (new Symbol(sym.MINUS)); }
<YYINITIAL> "*" { return (new Symbol(sym.TIMES)); }
<YYINITIAL> "/" { return (new Symbol(sym.DIVIDE)); }
<YYINITIAL> "(" { return (new Symbol(sym.LPAREN)); }
<YYINITIAL> ")" { return (new Symbol(sym.RPAREN)); }
<YYINITIAL> "[" { return (new Symbol(sym.LBRACKET)); }
<YYINITIAL> "]" { return (new Symbol(sym.RBRACKET)); }
<YYINITIAL> "{" { return (new Symbol(sym.LBLOCK)); }
<YYINITIAL> "}" { return (new Symbol(sym.RBLOCK)); }
<YYINITIAL> "<" { return (new Symbol(sym.LBRACE)); }
<YYINITIAL> ">" { return (new Symbol(sym.RBRACE)); }
<YYINITIAL> "//".*$ { }
<YYINITIAL> "set" {return (new Symbol(sym.SET)); }
<YYINITIAL> "paper" {return (new Symbol(sym.PAPER)); }
<YYINITIAL> "repeat" {return (new Symbol(sym.REPEAT)); }
<YYINITIAL> "forever" {return (new Symbol(sym.FOREVER)); }
<YYINITIAL> "pen" {return (new Symbol(sym.PEN)); }
<YYINITIAL> "line" {return (new Symbol(sym.LINE)); }
<YYINITIAL> "antialias" {return (new Symbol(sym.ANTIALIAS)); }
<YYINITIAL> "alias" {return (new Symbol(sym.ALIAS)); }
<YYINITIAL> "command" {return (new Symbol(sym.COMMAND)); }
<YYINITIAL> "number" {return (new Symbol(sym.NUMBER)); }
<YYINITIAL> "value" {return (new Symbol(sym.VALUE)); }
<YYINITIAL> "escape" {return (new Symbol(sym.ESCAPE)); }
<YYINITIAL> "load" {return (new Symbol(sym.LOAD)); }
<YYINITIAL> [A-Za-z][A-Za-z0-9]*"?" { 
	return new Symbol(sym.QUESTION, new String(yytext()));
	}
<YYINITIAL> [A-Za-z][A-Za-z0-9]* {
	String s = new String(yytext());
	if(commands.containsKey(s)) return new Symbol(sym.COMMANDNAME, s);
	else return new Symbol(sym.NAME, s);
	}
<YYINITIAL> {DIGIT}+ {
	try {return (new Symbol(sym.INTEGER, Integer.valueOf(yytext())));}
	catch (NumberFormatException e) {return new Symbol(sym.INTEGER, 0);} 
	}
<YYINITIAL> . {
	System.err.println("Illegal character: <" + yytext() + ">");
	}
	